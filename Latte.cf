-- Programs ------------------------------------------------
entrypoints Program ;
Prog.      Program ::= [Stmt] ;

-- Statements ----------------------------------------------
Empty.     Stmt ::= ";" ;
Exp.       Stmt ::= Expr ";" ;
Ass.       Stmt ::= [Ident] "=" Expr ";" ;
AssAdd.    Stmt ::= Ident "+=" Expr ";" ;
AssSub.    Stmt ::= Ident "-=" Expr ";" ;
AssMul.    Stmt ::= Ident "*=" Expr ";" ;
AssDiv.    Stmt ::= Ident "/=" Expr ";" ;
AssMod.    Stmt ::= Ident "%=" Expr ";" ;
Incr.      Stmt ::= Ident "++" ";" ;
Decr.      Stmt ::= Ident "--" ";" ;
Ret.       Stmt ::= "return" Expr ";" ;
Print.     Stmt ::= "print" "(" Expr ")" ";" ;
PrintLn.   Stmt ::= "println" "(" Expr ")" ";" ;
Assert.    Stmt ::= "assert" "(" Expr ")" ";" ;
If.        Stmt ::= "if" "(" Expr ")" Block ;
IfElse.    Stmt ::= "if" "(" Expr ")" Block "else" Block ;
While.     Stmt ::= "while" "(" Expr ")" Block ;
Brk.       Stmt ::= "break" ";" ;
Cntn.      Stmt ::= "continue" ";" ;
BStmt.     Stmt ::= Block ;
Blck.      Block ::= "{" [Stmt] "}" ;
Decl.      Stmt ::= Type [Item] ";" ;
NoInit.    Item ::= Ident ;
Init.      Item ::= Ident "=" Expr ;
FnDef.     Stmt ::= Type Ident "(" [Par] ")" Block ;
ParVal.    Par ::= Type Ident ;
ParRef.	   Par ::= Type "&" Ident ;
separator  Par "," ;
separator  Stmt "" ;
separator nonempty Ident "," ;
separator nonempty Item "," ;

-- Types ---------------------------------------------------
Int.       Type ::= "int" ;
Str.       Type ::= "string" ;
Bool.      Type ::= "bool" ;
Tuple.     Type ::= "[" [Type] "]" ;
separator nonempty Type "," ;

-- Expressions ---------------------------------------------
EOr.       Expr ::= Expr1 "||" Expr ;
EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;
ERel.      Expr2 ::= Expr2 RelOp Expr3 ;
EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;
EMul.      Expr4 ::= Expr4 MulOp Expr5 ;
Not.       Expr5 ::= "!" Expr6 ;
Neg.       Expr5 ::= "-" Expr6 ;
EVar.      Expr6 ::= Ident ;
EInt.      Expr6 ::= Integer ;
EString.   Expr6 ::= String ;
ETrue.     Expr6 ::= "true" ;
EFalse.    Expr6 ::= "false" ;
ETuple.    Expr6 ::= "[" [Expr] "]" ;
EApp.      Expr6 ::= Ident "(" [Arg] ")" ;
ValArg.    Arg ::= Expr ;
RefArg.    Arg ::= "&" Ident ;
coercions  Expr 6 ;
separator  Arg "," ;
separator nonempty Expr "," ;

-- Operators -----------------------------------------------
Plus.      AddOp ::= "+" ;
Minus.     AddOp ::= "-" ;
Times.     MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
Mod.       MulOp ::= "%" ;
LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;

-- Comments ------------------------------------------------
comment    "//" ;
comment    "/*" "*/" ;
