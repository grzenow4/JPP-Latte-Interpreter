-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language Latte.

module Latte.AbsLatte where

import Prelude (Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Functor, Foldable, Traversable
  , Int, Maybe(..)
  )
import qualified Data.String

type Program = Program' BNFC'Position
data Program' a = Prog a [Stmt' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Stmt = Stmt' BNFC'Position
data Stmt' a
    = Empty a
    | Exp a (Expr' a)
    | Ass a [Ident] (Expr' a)
    | AssAdd a Ident (Expr' a)
    | AssSub a Ident (Expr' a)
    | AssMul a Ident (Expr' a)
    | AssDiv a Ident (Expr' a)
    | AssMod a Ident (Expr' a)
    | Incr a Ident
    | Decr a Ident
    | Ret a (Expr' a)
    | Print a (Expr' a)
    | PrintLn a (Expr' a)
    | Assert a (Expr' a)
    | If a (Expr' a) (Block' a)
    | IfElse a (Expr' a) (Block' a) (Block' a)
    | While a (Expr' a) (Block' a)
    | Brk a
    | Cntn a
    | BStmt a (Block' a)
    | Decl a (Type' a) [Item' a]
    | FnDef a (Type' a) Ident [Par' a] (Block' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Block = Block' BNFC'Position
data Block' a = Blck a [Stmt' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Item = Item' BNFC'Position
data Item' a = NoInit a Ident | Init a Ident (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Par = Par' BNFC'Position
data Par' a = ParVal a (Type' a) Ident | ParRef a (Type' a) Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Type = Type' BNFC'Position
data Type' a = Int a | Str a | Bool a | Tuple a [Type' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Expr = Expr' BNFC'Position
data Expr' a
    = EOr a (Expr' a) (Expr' a)
    | EAnd a (Expr' a) (Expr' a)
    | ERel a (Expr' a) (RelOp' a) (Expr' a)
    | EAdd a (Expr' a) (AddOp' a) (Expr' a)
    | EMul a (Expr' a) (MulOp' a) (Expr' a)
    | Not a (Expr' a)
    | Neg a (Expr' a)
    | EVar a Ident
    | EInt a Integer
    | EString a String
    | ETrue a
    | EFalse a
    | ETuple a [Expr' a]
    | EApp a Ident [Arg' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Arg = Arg' BNFC'Position
data Arg' a = ValArg a (Expr' a) | RefArg a Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type AddOp = AddOp' BNFC'Position
data AddOp' a = Plus a | Minus a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MulOp = MulOp' BNFC'Position
data MulOp' a = Times a | Div a | Mod a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type RelOp = RelOp' BNFC'Position
data RelOp' a = LTH a | LE a | GTH a | GE a | EQU a | NE a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Program where
  hasPosition = \case
    Prog p _ -> p

instance HasPosition Stmt where
  hasPosition = \case
    Empty p -> p
    Exp p _ -> p
    Ass p _ _ -> p
    AssAdd p _ _ -> p
    AssSub p _ _ -> p
    AssMul p _ _ -> p
    AssDiv p _ _ -> p
    AssMod p _ _ -> p
    Incr p _ -> p
    Decr p _ -> p
    Ret p _ -> p
    Print p _ -> p
    PrintLn p _ -> p
    Assert p _ -> p
    If p _ _ -> p
    IfElse p _ _ _ -> p
    While p _ _ -> p
    Brk p -> p
    Cntn p -> p
    BStmt p _ -> p
    Decl p _ _ -> p
    FnDef p _ _ _ _ -> p

instance HasPosition Block where
  hasPosition = \case
    Blck p _ -> p

instance HasPosition Item where
  hasPosition = \case
    NoInit p _ -> p
    Init p _ _ -> p

instance HasPosition Par where
  hasPosition = \case
    ParVal p _ _ -> p
    ParRef p _ _ -> p

instance HasPosition Type where
  hasPosition = \case
    Int p -> p
    Str p -> p
    Bool p -> p
    Tuple p _ -> p

instance HasPosition Expr where
  hasPosition = \case
    EOr p _ _ -> p
    EAnd p _ _ -> p
    ERel p _ _ _ -> p
    EAdd p _ _ _ -> p
    EMul p _ _ _ -> p
    Not p _ -> p
    Neg p _ -> p
    EVar p _ -> p
    EInt p _ -> p
    EString p _ -> p
    ETrue p -> p
    EFalse p -> p
    ETuple p _ -> p
    EApp p _ _ -> p

instance HasPosition Arg where
  hasPosition = \case
    ValArg p _ -> p
    RefArg p _ -> p

instance HasPosition AddOp where
  hasPosition = \case
    Plus p -> p
    Minus p -> p

instance HasPosition MulOp where
  hasPosition = \case
    Times p -> p
    Div p -> p
    Mod p -> p

instance HasPosition RelOp where
  hasPosition = \case
    LTH p -> p
    LE p -> p
    GTH p -> p
    GE p -> p
    EQU p -> p
    NE p -> p

